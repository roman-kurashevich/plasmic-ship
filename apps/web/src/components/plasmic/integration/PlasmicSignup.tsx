// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ph1WL4Cxb3ZK7yQC6LjnPo
// Component: P_BN2FI77x
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: lao2224rYIi/component
import { TextInput } from "@mantine/core"; // plasmic-import: -QKVl7km6e/codeComponent
import { Button } from "@mantine/core"; // plasmic-import: eV6E2AjDCw/codeComponent

import { useScreenVariants as useScreenVariantsnPmUvUi2SXIh6 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nPMUvUI2sXIh6/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_integration.module.css"; // plasmic-import: ph1WL4Cxb3ZK7yQC6LjnPo/projectcss
import sty from "./PlasmicSignup.module.css"; // plasmic-import: P_BN2FI77x/css

import Ellipse3Icon from "./icons/PlasmicIcon__Ellipse3"; // plasmic-import: VYfKL0Faz2r/icon

export type PlasmicSignup__VariantMembers = {};
export type PlasmicSignup__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignup__VariantsArgs;
export const PlasmicSignup__VariantProps = new Array<VariantPropType>();

export type PlasmicSignup__ArgsType = {};
type ArgPropType = keyof PlasmicSignup__ArgsType;
export const PlasmicSignup__ArgProps = new Array<ArgPropType>();

export type PlasmicSignup__OverridesType = {
  root?: p.Flex<"div">;
  signup1?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  form?: p.Flex<"div">;
  signUp?: p.Flex<"div">;
  inputsContainer?: p.Flex<"div">;
  enterCode?: p.Flex<"a"> & Partial<LinkProps>;
  signUpButton?: p.Flex<typeof Button>;
  signInContainer?: p.Flex<"div">;
  text7?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  rectangle121?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  rectangle122?: p.Flex<"div">;
};

export interface DefaultSignupProps {}

function PlasmicSignup__RenderFunc(props: {
  variants: PlasmicSignup__VariantsArgs;
  args: PlasmicSignup__ArgsType;
  overrides: PlasmicSignup__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnPmUvUi2SXIh6()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <div
            data-plasmic-name={"signup1"}
            data-plasmic-override={overrides.signup1}
            className={classNames(projectcss.all, sty.signup1)}
          >
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <p.Stack
              as={"div"}
              data-plasmic-name={"form"}
              data-plasmic-override={overrides.form}
              hasGap={true}
              className={classNames(projectcss.all, sty.form)}
            >
              <div
                data-plasmic-name={"signUp"}
                data-plasmic-override={overrides.signUp}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.signUp
                )}
              >
                {"Sign up"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"inputsContainer"}
                data-plasmic-override={overrides.inputsContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.inputsContainer)}
              >
                <TextInput
                  className={classNames("__wab_instance", sty.textInput__jkkKl)}
                  disabled={false}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gxPuc
                      )}
                    >
                      {"First name"}
                    </div>
                  }
                  placeholder={"First name" as const}
                  radius={5 as const}
                  required={false}
                  size={"md" as const}
                  variant={"default" as const}
                  withAsterisk={false}
                />

                <TextInput
                  className={classNames("__wab_instance", sty.textInput__cmoqh)}
                  disabled={false}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2DDq1
                      )}
                    >
                      {"Last name"}
                    </div>
                  }
                  placeholder={"Last name" as const}
                  radius={5 as const}
                  required={false}
                  size={"md" as const}
                  variant={"default" as const}
                  withAsterisk={false}
                />

                <TextInput
                  className={classNames(
                    "__wab_instance",
                    sty.textInput___4Ob2H
                  )}
                  disabled={false}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yLskx
                      )}
                    >
                      {"Phone number"}
                    </div>
                  }
                  placeholder={"Phone number" as const}
                  radius={5 as const}
                  required={false}
                  size={"md" as const}
                  variant={"default" as const}
                  withAsterisk={false}
                />
              </p.Stack>

              <p.PlasmicLink
                data-plasmic-name={"enterCode"}
                data-plasmic-override={overrides.enterCode}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.enterCode
                )}
                component={Link}
                href={`/enter-code`}
                platform={"nextjs"}
              >
                <Button
                  data-plasmic-name={"signUpButton"}
                  data-plasmic-override={overrides.signUpButton}
                  className={classNames("__wab_instance", sty.signUpButton)}
                  color={"green" as const}
                  compact={false}
                  disabled={false}
                  fullWidth={true}
                  loaderPosition={"left" as const}
                  loading={false}
                  radius={5 as const}
                  size={"md" as const}
                  type={"button" as const}
                  uppercase={false}
                  variant={"filled" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___993BE
                    )}
                  >
                    {"Sign up"}
                  </div>
                </Button>
              </p.PlasmicLink>

              <p.Stack
                as={"div"}
                data-plasmic-name={"signInContainer"}
                data-plasmic-override={overrides.signInContainer}
                hasGap={true}
                className={classNames(projectcss.all, sty.signInContainer)}
              >
                <div
                  data-plasmic-name={"text7"}
                  data-plasmic-override={overrides.text7}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text7
                  )}
                >
                  {"Have an account?"}
                </div>

                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"green" as const}
                  compact={true}
                  disabled={false}
                  fullWidth={false}
                  loaderPosition={"left" as const}
                  loading={false}
                  radius={5 as const}
                  size={"md" as const}
                  type={"button" as const}
                  uppercase={false}
                  variant={"white" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nVkEq
                    )}
                  >
                    {"Sign in"}
                  </div>
                </Button>
              </p.Stack>
            </p.Stack>

            <div
              data-plasmic-name={"rectangle121"}
              data-plasmic-override={overrides.rectangle121}
              className={classNames(projectcss.all, sty.rectangle121)}
            />

            <Ellipse3Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />

            <div
              data-plasmic-name={"rectangle122"}
              data-plasmic-override={overrides.rectangle122}
              className={classNames(projectcss.all, sty.rectangle122)}
            />
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "signup1",
    "header",
    "form",
    "signUp",
    "inputsContainer",
    "enterCode",
    "signUpButton",
    "signInContainer",
    "text7",
    "button",
    "rectangle121",
    "svg",
    "rectangle122"
  ],
  signup1: [
    "signup1",
    "header",
    "form",
    "signUp",
    "inputsContainer",
    "enterCode",
    "signUpButton",
    "signInContainer",
    "text7",
    "button",
    "rectangle121",
    "svg",
    "rectangle122"
  ],
  header: ["header"],
  form: [
    "form",
    "signUp",
    "inputsContainer",
    "enterCode",
    "signUpButton",
    "signInContainer",
    "text7",
    "button"
  ],
  signUp: ["signUp"],
  inputsContainer: ["inputsContainer"],
  enterCode: ["enterCode", "signUpButton"],
  signUpButton: ["signUpButton"],
  signInContainer: ["signInContainer", "text7", "button"],
  text7: ["text7"],
  button: ["button"],
  rectangle121: ["rectangle121"],
  svg: ["svg"],
  rectangle122: ["rectangle122"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  signup1: "div";
  header: typeof Header;
  form: "div";
  signUp: "div";
  inputsContainer: "div";
  enterCode: "a";
  signUpButton: typeof Button;
  signInContainer: "div";
  text7: "div";
  button: typeof Button;
  rectangle121: "div";
  svg: "svg";
  rectangle122: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignup__VariantsArgs;
    args?: PlasmicSignup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSignup__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignup__ArgProps,
          internalVariantPropNames: PlasmicSignup__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSignup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignup";
  } else {
    func.displayName = `PlasmicSignup.${nodeName}`;
  }
  return func;
}

export const PlasmicSignup = Object.assign(
  // Top-level PlasmicSignup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    signup1: makeNodeComponent("signup1"),
    header: makeNodeComponent("header"),
    form: makeNodeComponent("form"),
    signUp: makeNodeComponent("signUp"),
    inputsContainer: makeNodeComponent("inputsContainer"),
    enterCode: makeNodeComponent("enterCode"),
    signUpButton: makeNodeComponent("signUpButton"),
    signInContainer: makeNodeComponent("signInContainer"),
    text7: makeNodeComponent("text7"),
    button: makeNodeComponent("button"),
    rectangle121: makeNodeComponent("rectangle121"),
    svg: makeNodeComponent("svg"),
    rectangle122: makeNodeComponent("rectangle122"),

    // Metadata about props expected for PlasmicSignup
    internalVariantProps: PlasmicSignup__VariantProps,
    internalArgProps: PlasmicSignup__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignup;
/* prettier-ignore-end */

// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ph1WL4Cxb3ZK7yQC6LjnPo
// Component: hiwxbifKaa
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: lao2224rYIi/component
import { TextInput } from "@mantine/core"; // plasmic-import: -QKVl7km6e/codeComponent
import { Button } from "@mantine/core"; // plasmic-import: eV6E2AjDCw/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_integration.module.css"; // plasmic-import: ph1WL4Cxb3ZK7yQC6LjnPo/projectcss
import sty from "./PlasmicEnterCode.module.css"; // plasmic-import: hiwxbifKaa/css

import Ellipse3Icon from "./icons/PlasmicIcon__Ellipse3"; // plasmic-import: VYfKL0Faz2r/icon

export type PlasmicEnterCode__VariantMembers = {};
export type PlasmicEnterCode__VariantsArgs = {};
type VariantPropType = keyof PlasmicEnterCode__VariantsArgs;
export const PlasmicEnterCode__VariantProps = new Array<VariantPropType>();

export type PlasmicEnterCode__ArgsType = {};
type ArgPropType = keyof PlasmicEnterCode__ArgsType;
export const PlasmicEnterCode__ArgProps = new Array<ArgPropType>();

export type PlasmicEnterCode__OverridesType = {
  root?: p.Flex<"div">;
  signup2?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  frame2?: p.Flex<"div">;
  frame1?: p.Flex<"div">;
  signUp?: p.Flex<"div">;
  text3?: p.Flex<"div">;
  textInput?: p.Flex<typeof TextInput>;
  buttonsContainer?: p.Flex<"div">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  rectangle122?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  rectangle123?: p.Flex<"div">;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultEnterCodeProps {}

function PlasmicEnterCode__RenderFunc(props: {
  variants: PlasmicEnterCode__VariantsArgs;
  args: PlasmicEnterCode__ArgsType;
  overrides: PlasmicEnterCode__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"signup2"}
          data-plasmic-override={overrides.signup2}
          className={classNames(projectcss.all, sty.signup2)}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"frame2"}
            data-plasmic-override={overrides.frame2}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame2)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"frame1"}
              data-plasmic-override={overrides.frame1}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame1)}
            >
              <div
                data-plasmic-name={"signUp"}
                data-plasmic-override={overrides.signUp}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.signUp
                )}
              >
                {"Enter code"}
              </div>

              <div
                data-plasmic-name={"text3"}
                data-plasmic-override={overrides.text3}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text3
                )}
              >
                {
                  "Enter a verification code that has been sent to +971 ** ****5527"
                }
              </div>

              <TextInput
                data-plasmic-name={"textInput"}
                data-plasmic-override={overrides.textInput}
                className={classNames("__wab_instance", sty.textInput)}
                disabled={false}
                label={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___0NXc
                    )}
                  >
                    {"Verification code"}
                  </div>
                }
                placeholder={"6-digit code" as const}
                radius={5 as const}
                required={false}
                size={"md" as const}
                variant={"default" as const}
                withAsterisk={false}
              />
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"buttonsContainer"}
              data-plasmic-override={overrides.buttonsContainer}
              hasGap={true}
              className={classNames(projectcss.all, sty.buttonsContainer)}
            >
              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                href={`/setup`}
                platform={"nextjs"}
              >
                <Button
                  className={classNames("__wab_instance", sty.button__u6PU5)}
                  color={"green" as const}
                  compact={false}
                  disabled={false}
                  fullWidth={true}
                  loaderPosition={"left" as const}
                  loading={false}
                  radius={5 as const}
                  size={"md" as const}
                  type={"button" as const}
                  uppercase={false}
                  variant={"filled" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zdLln
                    )}
                  >
                    {"Verify"}
                  </div>
                </Button>
              </p.PlasmicLink>

              <Button
                className={classNames("__wab_instance", sty.button__vnVf2)}
                color={"green" as const}
                compact={false}
                disabled={false}
                fullWidth={true}
                loaderPosition={"left" as const}
                loading={false}
                radius={5 as const}
                size={"md" as const}
                type={"button" as const}
                uppercase={false}
                variant={"white" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zWcgj
                  )}
                >
                  {"Resend code"}
                </div>
              </Button>
            </p.Stack>
          </p.Stack>

          <div
            data-plasmic-name={"rectangle122"}
            data-plasmic-override={overrides.rectangle122}
            className={classNames(projectcss.all, sty.rectangle122)}
          />

          <Ellipse3Icon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />

          <div
            data-plasmic-name={"rectangle123"}
            data-plasmic-override={overrides.rectangle123}
            className={classNames(projectcss.all, sty.rectangle123)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "signup2",
    "header",
    "frame2",
    "frame1",
    "signUp",
    "text3",
    "textInput",
    "textbox",
    "buttonsContainer",
    "link",
    "rectangle122",
    "svg",
    "rectangle123"
  ],
  signup2: [
    "signup2",
    "header",
    "frame2",
    "frame1",
    "signUp",
    "text3",
    "textInput",
    "textbox",
    "buttonsContainer",
    "link",
    "rectangle122",
    "svg",
    "rectangle123"
  ],
  header: ["header"],
  frame2: [
    "frame2",
    "frame1",
    "signUp",
    "text3",
    "textInput",
    "textbox",
    "buttonsContainer",
    "link"
  ],
  frame1: ["frame1", "signUp", "text3", "textInput", "textbox"],
  signUp: ["signUp"],
  text3: ["text3"],
  textInput: ["textInput", "textbox"],
  buttonsContainer: ["buttonsContainer", "link"],
  link: ["link"],
  rectangle122: ["rectangle122"],
  svg: ["svg"],
  rectangle123: ["rectangle123"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  signup2: "div";
  header: typeof Header;
  frame2: "div";
  frame1: "div";
  signUp: "div";
  text3: "div";
  textInput: typeof TextInput;
  buttonsContainer: "div";
  link: "a";
  rectangle122: "div";
  svg: "svg";
  rectangle123: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEnterCode__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEnterCode__VariantsArgs;
    args?: PlasmicEnterCode__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEnterCode__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEnterCode__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEnterCode__ArgProps,
          internalVariantPropNames: PlasmicEnterCode__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicEnterCode__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEnterCode";
  } else {
    func.displayName = `PlasmicEnterCode.${nodeName}`;
  }
  return func;
}

export const PlasmicEnterCode = Object.assign(
  // Top-level PlasmicEnterCode renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    signup2: makeNodeComponent("signup2"),
    header: makeNodeComponent("header"),
    frame2: makeNodeComponent("frame2"),
    frame1: makeNodeComponent("frame1"),
    signUp: makeNodeComponent("signUp"),
    text3: makeNodeComponent("text3"),
    textInput: makeNodeComponent("textInput"),
    buttonsContainer: makeNodeComponent("buttonsContainer"),
    link: makeNodeComponent("link"),
    rectangle122: makeNodeComponent("rectangle122"),
    svg: makeNodeComponent("svg"),
    rectangle123: makeNodeComponent("rectangle123"),

    // Metadata about props expected for PlasmicEnterCode
    internalVariantProps: PlasmicEnterCode__VariantProps,
    internalArgProps: PlasmicEnterCode__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEnterCode;
/* prettier-ignore-end */

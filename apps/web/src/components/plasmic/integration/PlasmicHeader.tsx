// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ph1WL4Cxb3ZK7yQC6LjnPo
// Component: lao2224rYIi
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_integration.module.css"; // plasmic-import: ph1WL4Cxb3ZK7yQC6LjnPo/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: lao2224rYIi/css

import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: QWKGSm8cyW/icon
import Icon16PxCheckIcon from "./icons/PlasmicIcon__Icon16PxCheck"; // plasmic-import: OKnpKfxY5Ul/icon
import Rectangle115Icon from "./icons/PlasmicIcon__Rectangle115"; // plasmic-import: -K789bKfxu9/icon
import Group4195Icon from "./icons/PlasmicIcon__Group4195"; // plasmic-import: X8WUlOXEdpi/icon
import Ellipse2Icon from "./icons/PlasmicIcon__Ellipse2"; // plasmic-import: 3xxbWDycExW/icon

export type PlasmicHeader__VariantMembers = {};
export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {};
type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>();

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  headerMenu?: p.Flex<"div">;
  menuItem?: p.Flex<"div">;
  menuItem2?: p.Flex<"div">;
  features?: p.Flex<"div">;
  menuItem3?: p.Flex<"div">;
  features2?: p.Flex<"div">;
  menuItem4?: p.Flex<"div">;
  features3?: p.Flex<"div">;
  controlPanel?: p.Flex<"div">;
  input?: p.Flex<"div">;
  label?: p.Flex<"div">;
  label2?: p.Flex<"div">;
  inputField?: p.Flex<"div">;
  hintMessage?: p.Flex<"div">;
  buttonContainer?: p.Flex<"div">;
  button?: p.Flex<"div">;
  iconCopyBig?: p.Flex<"div">;
  group286?: p.Flex<"div">;
  rectangle114?: p.Flex<"div">;
  text2?: p.Flex<"div">;
  iconSelectBig?: p.Flex<"div">;
  rectangle119?: p.Flex<"div">;
  avatar?: p.Flex<"div">;
  mk?: p.Flex<"div">;
  mk2?: p.Flex<"div">;
};

export interface DefaultHeaderProps {
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <div
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.text__spWlI
        )}
      >
        {"RateCare"}
      </div>

      {false ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"headerMenu"}
          data-plasmic-override={overrides.headerMenu}
          hasGap={true}
          className={classNames(projectcss.all, sty.headerMenu)}
        >
          <div
            data-plasmic-name={"menuItem"}
            data-plasmic-override={overrides.menuItem}
            className={classNames(projectcss.all, sty.menuItem)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rPjHs
              )}
            >
              {"Features"}
            </div>
          </div>

          <div
            data-plasmic-name={"menuItem2"}
            data-plasmic-override={overrides.menuItem2}
            className={classNames(projectcss.all, sty.menuItem2)}
          >
            <div
              data-plasmic-name={"features"}
              data-plasmic-override={overrides.features}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.features
              )}
            >
              {"Pricing"}
            </div>
          </div>

          <div
            data-plasmic-name={"menuItem3"}
            data-plasmic-override={overrides.menuItem3}
            className={classNames(projectcss.all, sty.menuItem3)}
          >
            <div
              data-plasmic-name={"features2"}
              data-plasmic-override={overrides.features2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.features2
              )}
            >
              {"Learn"}
            </div>
          </div>

          <div
            data-plasmic-name={"menuItem4"}
            data-plasmic-override={overrides.menuItem4}
            className={classNames(projectcss.all, sty.menuItem4)}
          >
            <div
              data-plasmic-name={"features3"}
              data-plasmic-override={overrides.features3}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.features3
              )}
            >
              {"Community"}
            </div>
          </div>
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        data-plasmic-name={"controlPanel"}
        data-plasmic-override={overrides.controlPanel}
        hasGap={true}
        className={classNames(projectcss.all, sty.controlPanel)}
      >
        {false ? (
          <div
            data-plasmic-name={"input"}
            data-plasmic-override={overrides.input}
            className={classNames(projectcss.all, sty.input)}
          >
            {false ? (
              <div
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(projectcss.all, sty.label)}
              >
                <div
                  data-plasmic-name={"label2"}
                  data-plasmic-override={overrides.label2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label2
                  )}
                >
                  {"Label"}
                </div>
              </div>
            ) : null}

            <p.Stack
              as={"div"}
              data-plasmic-name={"inputField"}
              data-plasmic-override={overrides.inputField}
              hasGap={true}
              className={classNames(projectcss.all, sty.inputField)}
            >
              <SearchIcon
                className={classNames(projectcss.all, sty.svg__cD6D)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pxsYe
                )}
              >
                {"Search"}
              </div>

              {false ? (
                <Icon16PxCheckIcon
                  className={classNames(projectcss.all, sty.svg__zteH)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>

            {false ? (
              <div
                data-plasmic-name={"hintMessage"}
                data-plasmic-override={overrides.hintMessage}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.hintMessage
                )}
              >
                {"Hint message"}
              </div>
            ) : null}
          </div>
        ) : null}
        {false ? (
          <div
            data-plasmic-name={"buttonContainer"}
            data-plasmic-override={overrides.buttonContainer}
            className={classNames(projectcss.all, sty.buttonContainer)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              hasGap={true}
              className={classNames(projectcss.all, sty.button)}
            >
              <div
                data-plasmic-name={"iconCopyBig"}
                data-plasmic-override={overrides.iconCopyBig}
                className={classNames(projectcss.all, sty.iconCopyBig)}
              >
                <div
                  data-plasmic-name={"group286"}
                  data-plasmic-override={overrides.group286}
                  className={classNames(projectcss.all, sty.group286)}
                >
                  <div
                    data-plasmic-name={"rectangle114"}
                    data-plasmic-override={overrides.rectangle114}
                    className={classNames(projectcss.all, sty.rectangle114)}
                  />

                  <Rectangle115Icon
                    className={classNames(projectcss.all, sty.svg__l6QbF)}
                    role={"img"}
                  />
                </div>
              </div>

              <div
                data-plasmic-name={"text2"}
                data-plasmic-override={overrides.text2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text2
                )}
              >
                {"Button"}
              </div>

              {false ? (
                <div
                  data-plasmic-name={"iconSelectBig"}
                  data-plasmic-override={overrides.iconSelectBig}
                  className={classNames(projectcss.all, sty.iconSelectBig)}
                >
                  <Group4195Icon
                    className={classNames(projectcss.all, sty.svg__rQmq)}
                    role={"img"}
                  />
                </div>
              ) : null}
              {false ? (
                <div
                  data-plasmic-name={"rectangle119"}
                  data-plasmic-override={overrides.rectangle119}
                  className={classNames(projectcss.all, sty.rectangle119)}
                />
              ) : null}
            </p.Stack>
          </div>
        ) : null}

        <div
          data-plasmic-name={"avatar"}
          data-plasmic-override={overrides.avatar}
          className={classNames(projectcss.all, sty.avatar)}
        >
          <Ellipse2Icon
            className={classNames(projectcss.all, sty.svg__hNfG6)}
            role={"img"}
          />

          <div
            data-plasmic-name={"mk"}
            data-plasmic-override={overrides.mk}
            className={classNames(projectcss.all, sty.mk)}
          >
            <div
              data-plasmic-name={"mk2"}
              data-plasmic-override={overrides.mk2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.mk2
              )}
            >
              {"SR"}
            </div>
          </div>
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3",
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "hintMessage",
    "buttonContainer",
    "button",
    "iconCopyBig",
    "group286",
    "rectangle114",
    "text2",
    "iconSelectBig",
    "rectangle119",
    "avatar",
    "mk",
    "mk2"
  ],
  headerMenu: [
    "headerMenu",
    "menuItem",
    "menuItem2",
    "features",
    "menuItem3",
    "features2",
    "menuItem4",
    "features3"
  ],
  menuItem: ["menuItem"],
  menuItem2: ["menuItem2", "features"],
  features: ["features"],
  menuItem3: ["menuItem3", "features2"],
  features2: ["features2"],
  menuItem4: ["menuItem4", "features3"],
  features3: ["features3"],
  controlPanel: [
    "controlPanel",
    "input",
    "label",
    "label2",
    "inputField",
    "hintMessage",
    "buttonContainer",
    "button",
    "iconCopyBig",
    "group286",
    "rectangle114",
    "text2",
    "iconSelectBig",
    "rectangle119",
    "avatar",
    "mk",
    "mk2"
  ],
  input: ["input", "label", "label2", "inputField", "hintMessage"],
  label: ["label", "label2"],
  label2: ["label2"],
  inputField: ["inputField"],
  hintMessage: ["hintMessage"],
  buttonContainer: [
    "buttonContainer",
    "button",
    "iconCopyBig",
    "group286",
    "rectangle114",
    "text2",
    "iconSelectBig",
    "rectangle119"
  ],
  button: [
    "button",
    "iconCopyBig",
    "group286",
    "rectangle114",
    "text2",
    "iconSelectBig",
    "rectangle119"
  ],
  iconCopyBig: ["iconCopyBig", "group286", "rectangle114"],
  group286: ["group286", "rectangle114"],
  rectangle114: ["rectangle114"],
  text2: ["text2"],
  iconSelectBig: ["iconSelectBig"],
  rectangle119: ["rectangle119"],
  avatar: ["avatar", "mk", "mk2"],
  mk: ["mk", "mk2"],
  mk2: ["mk2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerMenu: "div";
  menuItem: "div";
  menuItem2: "div";
  features: "div";
  menuItem3: "div";
  features2: "div";
  menuItem4: "div";
  features3: "div";
  controlPanel: "div";
  input: "div";
  label: "div";
  label2: "div";
  inputField: "div";
  hintMessage: "div";
  buttonContainer: "div";
  button: "div";
  iconCopyBig: "div";
  group286: "div";
  rectangle114: "div";
  text2: "div";
  iconSelectBig: "div";
  rectangle119: "div";
  avatar: "div";
  mk: "div";
  mk2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerMenu: makeNodeComponent("headerMenu"),
    menuItem: makeNodeComponent("menuItem"),
    menuItem2: makeNodeComponent("menuItem2"),
    features: makeNodeComponent("features"),
    menuItem3: makeNodeComponent("menuItem3"),
    features2: makeNodeComponent("features2"),
    menuItem4: makeNodeComponent("menuItem4"),
    features3: makeNodeComponent("features3"),
    controlPanel: makeNodeComponent("controlPanel"),
    input: makeNodeComponent("input"),
    label: makeNodeComponent("label"),
    label2: makeNodeComponent("label2"),
    inputField: makeNodeComponent("inputField"),
    hintMessage: makeNodeComponent("hintMessage"),
    buttonContainer: makeNodeComponent("buttonContainer"),
    button: makeNodeComponent("button"),
    iconCopyBig: makeNodeComponent("iconCopyBig"),
    group286: makeNodeComponent("group286"),
    rectangle114: makeNodeComponent("rectangle114"),
    text2: makeNodeComponent("text2"),
    iconSelectBig: makeNodeComponent("iconSelectBig"),
    rectangle119: makeNodeComponent("rectangle119"),
    avatar: makeNodeComponent("avatar"),
    mk: makeNodeComponent("mk"),
    mk2: makeNodeComponent("mk2"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */

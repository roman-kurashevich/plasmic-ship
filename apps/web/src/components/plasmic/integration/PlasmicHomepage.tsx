// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ph1WL4Cxb3ZK7yQC6LjnPo
// Component: LMEvGs6IPZqW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Button } from "@mantine/core"; // plasmic-import: eV6E2AjDCw/codeComponent
import { Select } from "@mantine/core"; // plasmic-import: aQ6gxybG5l/codeComponent
import { TextInput } from "@mantine/core"; // plasmic-import: -QKVl7km6e/codeComponent
import { Link as Link2 } from "../.."; // plasmic-import: S8lT4tfZVW/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_integration.module.css"; // plasmic-import: ph1WL4Cxb3ZK7yQC6LjnPo/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: LMEvGs6IPZqW/css

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  section?: p.Flex<"section">;
  h1?: p.Flex<"h1">;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  mantineContainerText?: p.Flex<"div">;
  selectMantine?: p.Flex<typeof Select>;
  textInput?: p.Flex<typeof TextInput>;
  mantineContainerText2?: p.Flex<"div">;
  linkShip?: p.Flex<typeof Link2>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        <p.Stack
          as={"section"}
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          hasGap={true}
          className={classNames(projectcss.all, sty.section)}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"Welcome to Plasmic-Ship integration demo"}
          </h1>

          <p.PlasmicLink
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={`/signup`}
            platform={"nextjs"}
          >
            <Button
              className={classNames("__wab_instance", sty.button__lLis8)}
              color={"green" as const}
              compact={false}
              disabled={false}
              fullWidth={false}
              loaderPosition={"left" as const}
              loading={false}
              radius={5 as const}
              size={"lg" as const}
              type={"button" as const}
              uppercase={false}
              variant={"filled" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xnS4K
                )}
              >
                {"Click here to watch Sign up demo"}
              </div>
            </Button>
          </p.PlasmicLink>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.freeBox__b0AN)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rrHA)}
          >
            <div
              data-plasmic-name={"mantineContainerText"}
              data-plasmic-override={overrides.mantineContainerText}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.mantineContainerText
              )}
            >
              {"Here we have Mantine components imported from code"}
            </div>

            <Button
              className={classNames("__wab_instance", sty.button__wn1Fl)}
              color={"cyan" as const}
              compact={false}
              disabled={false}
              fullWidth={false}
              loaderPosition={"left" as const}
              loading={false}
              radius={5 as const}
              size={"md" as const}
              type={"button" as const}
              uppercase={false}
              variant={"filled" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jvr8D
                )}
              >
                {"Mantine Button from Ship project"}
              </div>
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__c2Tqy)}
              color={"cyan" as const}
              compact={false}
              disabled={false}
              fullWidth={false}
              loaderPosition={"left" as const}
              loading={false}
              radius={5 as const}
              size={"xs" as const}
              type={"button" as const}
              uppercase={false}
              variant={"gradient" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__mj6Tj
                )}
              >
                {"Mantine Button from Ship project"}
              </div>
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__rRgyL)}
              color={"cyan" as const}
              compact={false}
              disabled={false}
              fullWidth={false}
              loaderPosition={"left" as const}
              loading={true}
              radius={5 as const}
              size={"md" as const}
              type={"button" as const}
              uppercase={false}
              variant={"outline" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pfAe
                )}
              >
                {"Mantine Button from Ship project"}
              </div>
            </Button>

            <Select
              data-plasmic-name={"selectMantine"}
              data-plasmic-override={overrides.selectMantine}
              className={classNames("__wab_instance", sty.selectMantine)}
              data={["Option1", "Option2", "Option3", "Option4"]}
              disabled={false}
              dropdownPosition={"top" as const}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nocjX
                  )}
                >
                  {""}
                </div>
              }
              placeholder={"Enter placeholder..." as const}
              radius={5 as const}
              size={"md" as const}
              variant={"default" as const}
            />

            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              disabled={false}
              label={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rwsD
                  )}
                >
                  {"Enter label..."}
                </div>
              }
              placeholder={"Enter placeholder..." as const}
              radius={5 as const}
              required={false}
              size={"md" as const}
              variant={"default" as const}
              withAsterisk={false}
            />
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__yslx)}>
            <div
              data-plasmic-name={"mantineContainerText2"}
              data-plasmic-override={overrides.mantineContainerText2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.mantineContainerText2
              )}
            >
              {"Here we have Ship component imported from code"}
            </div>

            <Link2
              data-plasmic-name={"linkShip"}
              data-plasmic-override={overrides.linkShip}
              align={"center" as const}
              className={classNames("__wab_instance", sty.linkShip)}
              disabled={false}
              href={"#" as const}
              icon={
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__iZ9S6
                  )}
                >
                  {""}
                </div>
              }
              inNewTab={true}
              inherit={false}
              size={"md" as const}
              type={"url" as const}
              underline={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ypMsw
                )}
              >
                {"Check!"}
              </div>
            </Link2>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "h1",
    "link",
    "mantineContainerText",
    "selectMantine",
    "textInput",
    "textbox",
    "mantineContainerText2",
    "linkShip"
  ],
  section: ["section", "h1", "link"],
  h1: ["h1"],
  link: ["link"],
  mantineContainerText: ["mantineContainerText"],
  selectMantine: ["selectMantine"],
  textInput: ["textInput", "textbox"],
  mantineContainerText2: ["mantineContainerText2"],
  linkShip: ["linkShip"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  section: "section";
  h1: "h1";
  link: "a";
  mantineContainerText: "div";
  selectMantine: typeof Select;
  textInput: typeof TextInput;
  mantineContainerText2: "div";
  linkShip: typeof Link2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    mantineContainerText: makeNodeComponent("mantineContainerText"),
    selectMantine: makeNodeComponent("selectMantine"),
    textInput: makeNodeComponent("textInput"),
    mantineContainerText2: makeNodeComponent("mantineContainerText2"),
    linkShip: makeNodeComponent("linkShip"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
